# ===============================================================================================
# source definition for remote devices
# ===============================================================================================

# ===============================================================================================
# Defaults for the default-network-drivers() source:
# 514, both TCP and UDP, for RFC3164 (BSD-syslog) formatted traffic
# 601 TCP, for RFC5424 (IETF-syslog) formatted traffic
# 6514 TCP, for TLS-encrypted traffic
# ===============================================================================================

# source s_network-defaults { default-network-drivers() };
source s_default-ports {
    channel {
        source {
            `splunk-udp-driver` (
                transport("udp")
                port(`udp-listening-port`)
                ip-protocol(`ip-version`)
                so-rcvbuf(`SCS_SOURCE_NET_SO_RCVBUF`)
                keep-hostname(yes)
                keep-timestamp(yes)
                use-dns(no)
                use-fqdn(no)
                chain-hostnames(off)
                flags(no-parse)
            );

            `splunk-tcp-driver`  (
                transport("tcp")
                port(`tcp-listening-port`)
                ip-protocol(`ip-version`)
                max-connections(`SCS_SOURCE_NET_TCP_MAX_CONNECTIONS`)
                log-iw-size(`SCS_SOURCE_NET_TCP_WINDOW_SIZE`)
                log-fetch-limit(`SCS_SOURCE_NET_TCP_FETCH_LIMIT`)
                keep-hostname(yes)
                keep-timestamp(yes)
                use-dns(no)
                use-fqdn(no)
                chain-hostnames(off)
                flags(no-parse)
            );
        };
        #TODO: #60 Remove this function with enhancement
        rewrite(set_metadata_presume);
        rewrite(set_rfcnonconformant);
        rewrite(r_set_splunk_default);

        if {
            filter(f_rfc5424_strict);
            parser {
                    syslog-parser(flags(syslog-protocol  store-raw-message));
                };
            rewrite(set_rfc5424_strict);
        } elif {
            filter(f_rfc5424_noversion);
            parser {
                    syslog-parser(flags(syslog-protocol  store-raw-message));
                };
            rewrite(set_rfc5424_noversion);
        } elif {
            parser {cisco-parser()};
            rewrite(set_metadata_vendor_product_cisco_ios);
        } else {
            parser {
                syslog-parser(time-zone(`default-timezone`) flags(store-raw-message));
            };
            rewrite(set_rfc3164);
        };

        parser {
            vendor_product_by_source();
        };
   };
};
